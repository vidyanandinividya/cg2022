JavaScript
JS is designed to add interactivity and dynamic effects to the web pages by manipulating the content returned from the web server.
<script> </script>
Variable
    Variables are symbolic names for values
    var  --Global variable
    let    -- ES6 -- block variable 
    const  -- ES6 -- constant variable which needs to be initialized
                     the value can not be changed
    Naming Conventions
    -start with a letter, underscore(_) or dollar sign($)
    -can not start with a number
    -can not contain spaces
    -cannot be a JS keyword
Data Types
    It basically specify what kind of data can be stored and manipulated within a program
    string
    number
    boolean
    undefined
    null
    object
    array
    function
    typeof 
     It is used to find out what type of data a variable or operand contains
     It can be use with or without paranthesis
Operators
    These are symbols or keywords that tell the JS engine to perform some sort of actions.
CC #1
Mark and John are trying to compare their BMI (Body Mask Index), which is calculated using the formula: BMI = mass / height * * 2 = mass / (height * height) . (mass in kg and height in meter)
1. Store Mark's and John's mass and height in Variables
2. Calculate both their BMIs using the formula
3. Create a boolean variable 'markHeigherBMI' containing information about whether Mark has a higher BMI that John
 1. Print a nice output to the console, saying who has the higher BMI. The message can be either "Mark's BMI is higher that John's!" or "John's BMI is higher than Mark's!"
 2. use a template literal to include the BMI values in the outputs
    "Mark's BMI (28.3) is higner than John's (23.9)"

String and Template Literals
\n - newline character
Conditional Statements
--if Statement
--if..else Statement
--if..else if..else Statement
--switch..case statement
Type Conversion and Type Coercion
    Both are same because both are used to convert values from one data type to another
    The key difference
    type coercion is implicit whereas type conversion can be either implicit or explicit
CC #2
There are two gymnastics teams , Dolphin and Koalas
They compete againt each other 3 times. The winner with the highest average score wins the trophy
1. calculate the average score for each team, using the test data
2. Compare the team's average scores to determine the winner of the competition, and print it to the console.
Don't forget that there can be a draw, so test for that as well 

Test Data: Dolphins score 96, 108 and 89
           Koalas score 88, 91 and 110
3. Include a requirement for a minimum score of 100. with this rule,
 a team only wins if it  has a higher score than the other team, and at the same time a score of at least 100 points
    Hint: use logical operator to test for minimum score , as well as multiple else-if blocks

Switch .. case
 It tests a variable or expression against a series of values until it finds a match, and then executes the block of code corresponding to that match

CC #3
John wants to build a very simple tip calculator for whenever he goes eating in a restaurant.
In his country, It's usual to tip 15% if the bill value is between 50 and 300. if the value is different, the tip is 20% 
1. your task is to calculate the tip, depending on the bill value. 
    create a variable 'tip' for this (do use ternary operator)
2. print a string to the console containing the bill value, the tip, and the final value (bill + tip) ( do use template string)
Test data: Test fo bill values 275, 430

Function 
    It is a group of statements that perform specific tasks and can be kept and maintained separately

    It reduces the repetition of code within a program
    It makes the code much easier to maintain
    It makes it easier to eliminate the errors

    receive input date
    transform data
    output data

    Function Declaration
        Functions that can be used before it's declared


    Function Expression
        Essentially a function value stored in a variable

    Arrow Function
        Great for a quick one-line functions. has no function keyword
CC #4
Each team compete 3 times, and then the average of the 3 scores is calculated (so one average score per team)
A team only wins if it has atleast double the average score of the other team. otherwise, no team wins

1. create an arrow function 'calcAvearge' to calculate the average of 3 scores
2. use the function to calculate the average for both teams
3. create a function 'checkWinner' that takes the average score of each team as parameteres ('avgDolphins' and 'avgKoalas') and then logs the winner to the console, together with the victory points , according to the rule "Koalas win (30 vs 13)"
4. use the 'checkWinner' function to determine the winner.
5. ignore draws
Test Data: Dolphins score 44,23, and 71. Koalas score 65, 54 and 49

Immediately Invoked Function Expression (IIFE)

(function(){
    //...
})();

function add(a,b)
{
    return a+b;
}
console.log(window.add)
    The script may not use the memory efficiently
    Having global variables and functions will likely cause the name collisions

closures
    It is a combination of a function bundled together with reference to its surrounding state.
    It gives you access to an outer function's scope from an inner function
Array 
    These are complex variables that allow to store more than one value or group of values under a single variable name

CC #5
Tip 15% of the bill if the bill value is between 50 and 300, and if the value is different, the tip is 20%
1. write a function 'calcTip' that takes any bill value as an input and returns the corresponding tip, calculated based on the rule above.
    Use the function type you like the most
2. And now let's use arrays! so create an array 'bills' containg the test data
Test data: Test fo bill values 275, 430,125 and 550
3. create an array 'tips' containing the tip value for each bill
4. Create an array 'total' containing total values, so the bill+tip

Objects
    define key value pairs
CC #1
BMI = mass / height * * 2 = mass / (height * height) . (mass in kg and height in meter)

1. for each of them, create an object with properties for their full name, and height
2. create a 'calcBMI' method on each object to calculate the BMI. store the BMI value to a property and also return it from the method.
3. Log to the console who has the higher BMI, together with the full name and the respective BMI
"John Smith's BMI (28.3) is higher than the Steven Miller's (23.9)!"

map, filter and reduce

map
 It is used to loop over arrays just like forEach method
 map creates a brand new array based on the original array
 arr=[2,3,4,5]
 condition - multiply the elements with 2
 this method maps the value of the original array to a new array and that's wht this method is called map.
filter
 It is used to filter for elements in the original array which satisfy a certain condition 
 arr=[24,30,12,56,5,9]
 condition -looking for elements grater than 10
 filterarr=[24,30,12,56]
reduce 
It is used to boil down all the elements of the original array into one single value
arr=[2,5,8,10]
condition : add all the elemnts in the array
DOM (Document Object model)
JS <---- DOM ---> Browser
 Allows us to make JS interact with the Browser
 DOM tree is generated from an HTML document. which we can then interact with
 Document --> ELement (html) --> Element (body) --> Element (section)-->Element (p)
document.createElement() -- creats a new element in an HTML document
Navigate Between the nodes
Timers
    It is a function that enable you to execute a function at a particular time.

    setTimeout()
        It is used to execute a function or specified piece of code just once after the certain period of time
    setInterval()
        It is used to execute a function or specified piece of code repeatedly at fixed time intervals
OOPs in JavaScript
    OOP is a programming paradigm based on concept of Objects
    we use objects to model(describe) real-world or abstract features
    Objects may contain data (properties) and code (methods)
    Interaction happen through a public interface(API) methods that the code outside of the object can access and use to communicate with the object.
    Abstraction 

    Encapsulation
    Inheritance
    Polymorphism
3 ways 
    Constructor function
        create object from a function
        Example : Array, Map and Set 
    ES6 Classes
        ES6 classes do not behave like classes in classical OOP
    Object.create()
        is the easiest and most straightforward way of linking an object to a prototype object
CC #2
    1. use constrcutor fucntion to implement a Car. A car has a make and speed property. The spped property is the current speed of the car in km/h 
    2. Implement an 'accelerate' method that will increase the car's speed by 10, and log the new speeed to the console.
    3. Implement a 'brake' method that will decrease the car's speed by 5, and log the new speed to the console.
    4. create 2 car objects and experiment with calling 'accelerate' and 'brake' multiple times on each of them
    Car 1: 'BMW' 120km/h 
    Car 2: 'Mercedes' 95km/h 
Asynchronous Java script

Synchronous vs Asynchronous
Synchronous -- Eecutes one after the other
Asynchronous -- Not occuring at the same time
  Browser API/Web API 
    It include methods like setTimeout or event handlers like click, mouse over
    
  Promises
   A unique JS object that allows to perform asynchronous operation 

   create using Promise constructor.
   pass an executor function to it.
   resolve -- what to do when promise returns successfully
   reject -- what to so when it throws an error

   .then() -- handle the result
   .catch() -- handle the error

//define a function
function f1()
{
    //Do something
}
function f2()
{
    //Do something
    f1();
}
function f3()
{
    //Do something
    f2()
}
//Invoke the function
f1() -- First it goes to stack execute and pops out
f2() -- Second it goes to stack execute and pops out
f3() -- Third it goes to stack execute and pops out
f3()

async/await 

async - it is used to return promise
await - It is used to wait and handle promise

-- await keyword can not be used without async 
-- the function you use after await keyword may or may not be an async